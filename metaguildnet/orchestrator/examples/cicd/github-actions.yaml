# GitHub Actions Workflow for GuildNet Deployment
# Place this in .github/workflows/deploy.yml

name: Deploy to GuildNet

on:
  push:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/staging' || github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Install MetaGuildNet CLI
        run: |
          pip install uv
          git clone https://github.com/your/guildnet.git
          cd guildnet/metaguildnet/python
          uv pip install -e .

      - name: Deploy to staging
        env:
          MGN_API_URL: ${{ secrets.GUILDNET_API_URL }}
          MGN_API_TOKEN: ${{ secrets.GUILDNET_API_TOKEN }}
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        run: |
          mgn workspace create staging-cluster \
            --name ${{ github.event.repository.name }} \
            --image $IMAGE_TAG \
            --env "ENVIRONMENT=staging" \
            --env "VERSION=${{ github.sha }}"

      - name: Wait for deployment
        env:
          MGN_API_URL: ${{ secrets.GUILDNET_API_URL }}
          MGN_API_TOKEN: ${{ secrets.GUILDNET_API_TOKEN }}
        run: |
          mgn workspace wait staging-cluster \
            ${{ github.event.repository.name }} \
            --timeout 5m

      - name: Run smoke tests
        env:
          MGN_API_URL: ${{ secrets.GUILDNET_API_URL }}
          MGN_API_TOKEN: ${{ secrets.GUILDNET_API_TOKEN }}
        run: |
          mgn workspace test staging-cluster \
            ${{ github.event.repository.name }} \
            --http-check /health \
            --http-check /api/status

  deploy-production:
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production

    strategy:
      matrix:
        cluster: [prod-us-east, prod-us-west, prod-eu-west]
      max-parallel: 1  # Deploy one at a time for safety

    steps:
      - name: Install MetaGuildNet CLI
        run: |
          pip install uv
          git clone https://github.com/your/guildnet.git
          cd guildnet/metaguildnet/python
          uv pip install -e .

      - name: Deploy to ${{ matrix.cluster }}
        env:
          MGN_API_URL: ${{ secrets.GUILDNET_API_URL }}
          MGN_API_TOKEN: ${{ secrets.GUILDNET_API_TOKEN }}
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        run: |
          mgn workspace create ${{ matrix.cluster }} \
            --name ${{ github.event.repository.name }} \
            --image $IMAGE_TAG \
            --env "ENVIRONMENT=production" \
            --env "VERSION=${{ github.sha }}" \
            --env "CLUSTER=${{ matrix.cluster }}"

      - name: Wait for deployment
        env:
          MGN_API_URL: ${{ secrets.GUILDNET_API_URL }}
          MGN_API_TOKEN: ${{ secrets.GUILDNET_API_TOKEN }}
        run: |
          mgn workspace wait ${{ matrix.cluster }} \
            ${{ github.event.repository.name }} \
            --timeout 10m

      - name: Verify deployment
        env:
          MGN_API_URL: ${{ secrets.GUILDNET_API_URL }}
          MGN_API_TOKEN: ${{ secrets.GUILDNET_API_TOKEN }}
        run: |
          mgn workspace test ${{ matrix.cluster }} \
            ${{ github.event.repository.name }} \
            --http-check /health

      - name: Rollback on failure
        if: failure()
        env:
          MGN_API_URL: ${{ secrets.GUILDNET_API_URL }}
          MGN_API_TOKEN: ${{ secrets.GUILDNET_API_TOKEN }}
        run: |
          echo "Deployment failed, rolling back..."
          mgn workspace delete ${{ matrix.cluster }} \
            ${{ github.event.repository.name }}

  notify:
    needs: [deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Deployment ${{ job.status }}: ${{ github.event.repository.name }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment Status*: ${{ job.status }}\n*Repository*: ${{ github.repository }}\n*Commit*: ${{ github.sha }}\n*Branch*: ${{ github.ref_name }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

