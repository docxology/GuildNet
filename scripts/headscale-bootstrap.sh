#!/usr/bin/env bash
set -euo pipefail
ROOT=$(CDPATH= cd -- "$(dirname -- "$0")/.." && pwd)

ENV_FILE="$ROOT/.env"
STATE_DIR="$HOME/.guildnet/headscale"
CONTAINER=${HEADSCALE_CONTAINER_NAME:-"guildnet-headscale"}
USER_NAME=${HEADSCALE_USER:-"guildnet"}

need() { command -v "$1" >/dev/null 2>&1 || { echo "Missing: $1" >&2; exit 1; }; }
need docker

# Create .env file if it doesn't exist
if [ ! -f "$ENV_FILE" ]; then
  echo "Creating basic .env file for Headscale bootstrap..."
  cat > "$ENV_FILE" << 'EOF'
# GuildNet Configuration
# This file is auto-generated by headscale-bootstrap.sh
# Edit as needed for your environment

# Headscale/Tailscale Configuration
TS_LOGIN_SERVER=
TS_AUTHKEY=
HEADSCALE_URL=

# Optional: Hostname for this machine (defaults to hostname)
TS_HOSTNAME=

# Optional: Database configuration
RETHINKDB_HOST=
RETHINKDB_PORT=28015

# Optional: Kubernetes configuration
KUBECONFIG=
EOF
  echo ".env file created at $ENV_FILE"
fi

# Ensure Headscale is up and we know the server URL
bash "$ROOT/scripts/headscale-run.sh" up >/dev/null
SERVER_URL_FILE="$STATE_DIR/server_url"

# Try to get server URL from multiple sources
if [ -f "$SERVER_URL_FILE" ]; then
  SERVER_URL=$(cat "$SERVER_URL_FILE" | tr -d '\n\r')
elif [ -n "${HEADSCALE_SERVER_URL:-}" ]; then
  SERVER_URL="$HEADSCALE_SERVER_URL"
elif [ -n "${TS_LOGIN_SERVER:-}" ]; then
  SERVER_URL="$TS_LOGIN_SERVER"
else
  # Try to detect from running container
  if docker ps --format '{{.Names}}' | grep -q '^guildnet-headscale$'; then
    # Get the port that Headscale is listening on
    HEADSCALE_PORT=$(docker port guildnet-headscale 8081/tcp | cut -d: -f2 || echo "8081")
    BIND_HOST=$(docker inspect guildnet-headscale --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' || echo "127.0.0.1")
    if [ "$BIND_HOST" = "127.0.0.1" ]; then
      BIND_HOST=$(hostname -I | awk '{print $1}' | head -n1 || echo "127.0.0.1")
    fi
    SERVER_URL="http://${BIND_HOST}:${HEADSCALE_PORT}"
    echo "Auto-detected server URL: $SERVER_URL"
  else
    echo "Cannot determine Headscale server URL. Please set HEADSCALE_SERVER_URL or ensure server_url file exists." >&2
    exit 1
  fi
fi

# Ensure user exists
if ! docker exec -i "$CONTAINER" headscale users list 2>/dev/null | awk '{print $2}' | grep -q "^${USER_NAME}$"; then
  echo "[bootstrap] Creating Headscale user: $USER_NAME"
  docker exec -i "$CONTAINER" headscale users create "$USER_NAME" >/dev/null
fi

# Create a reusable preauth key
KEY_LINE=$(docker exec -i "$CONTAINER" headscale preauthkeys create --reusable --ephemeral=false --expiration 168h --user "$USER_NAME" | tail -n1)
KEY=$(echo "$KEY_LINE" | awk '{print $1}')
if [ -z "$KEY" ]; then
  echo "Failed to obtain preauth key from headscale." >&2
  exit 1
fi
mkdir -p "$STATE_DIR"
echo "$KEY" > "$STATE_DIR/preauth-${USER_NAME}.txt"

# Update .env entries
tmp=$(mktemp)
sed -E "s#^(TS_LOGIN_SERVER=).*#\\1$SERVER_URL#" "$ENV_FILE" > "$tmp" && mv "$tmp" "$ENV_FILE"
tmp=$(mktemp)
sed -E "s#^(HEADSCALE_URL=).*#\\1$SERVER_URL#" "$ENV_FILE" > "$tmp" && mv "$tmp" "$ENV_FILE"
if grep -q '^TS_AUTHKEY=' "$ENV_FILE"; then
  tmp=$(mktemp)
  sed -E "s#^(TS_AUTHKEY=).*#\\1$KEY#" "$ENV_FILE" > "$tmp" && mv "$tmp" "$ENV_FILE"
else
  echo "TS_AUTHKEY=$KEY" >> "$ENV_FILE"
fi

echo "[bootstrap] TS_LOGIN_SERVER set to $SERVER_URL"
echo "[bootstrap] TS_AUTHKEY set in .env (user=$USER_NAME)"
echo "[bootstrap] Done. You can now run: make router-up"
